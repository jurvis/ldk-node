// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(ldk_nodeFFI)
import ldk_nodeFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_ldk_node_7d5c_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_ldk_node_7d5c_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public protocol BuilderProtocol {
    func `build`()  -> Node
    
}

public class Builder: BuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try!
    
    rustCall() {
    
    ldk_node_7d5c_Builder_new($0)
})
    }

    deinit {
        try! rustCall { ffi_ldk_node_7d5c_Builder_object_free(pointer, $0) }
    }

    
    public static func `fromConfig`(`config`: Config)  -> Builder {
        return Builder(unsafeFromRawPointer: try!
    
    rustCall() {
    
    ldk_node_7d5c_Builder_from_config(
        FfiConverterTypeConfig.lower(`config`), $0)
})
    }
    

    
    public func `build`()  -> Node {
        return try! FfiConverterTypeNode.lift(
            try!
    rustCall() {
    
    ldk_node_7d5c_Builder_build(self.pointer, $0
    )
}
        )
    }
    
}


public struct FfiConverterTypeBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Builder

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Builder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Builder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Builder {
        return Builder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Builder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public protocol NodeProtocol {
    func `start`() throws
    func `stop`() throws
    func `syncWallets`() throws
    func `nextEvent`()  -> Event
    func `eventHandled`() 
    func `nodeId`()  -> PublicKey
    func `newFundingAddress`() throws -> Address
    func `spendableOnchainBalanceSats`() throws -> UInt64
    func `totalOnchainBalanceSats`() throws -> UInt64
    func `connect`(`nodeId`: PublicKey, `address`: SocketAddr, `permanently`: Bool) throws
    func `disconnect`(`nodeId`: PublicKey) throws
    func `connectOpenChannel`(`nodeId`: PublicKey, `address`: SocketAddr, `channelAmountSats`: UInt64, `announceChannel`: Bool) throws
    func `closeChannel`(`channelId`: ChannelId, `counterpartyNodeId`: PublicKey) throws
    func `sendPayment`(`invoice`: Invoice) throws -> PaymentHash
    func `sendPaymentUsingAmount`(`invoice`: Invoice, `amountMsat`: UInt64) throws -> PaymentHash
    func `sendSpontaneousPayment`(`amountMsat`: UInt64, `nodeId`: PublicKey) throws -> PaymentHash
    func `receivePayment`(`amountMsat`: UInt64, `description`: String, `expirySecs`: UInt32) throws -> Invoice
    func `receiveVariableAmountPayment`(`description`: String, `expirySecs`: UInt32) throws -> Invoice
    func `paymentInfo`(`paymentHash`: PaymentHash)  -> PaymentInfo?
    func `listPeers`()  -> [PeerDetails]
    func `listChannels`()  -> [ChannelDetails]
    
}

public class Node: NodeProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_ldk_node_7d5c_Node_object_free(pointer, $0) }
    }

    

    
    public func `start`() throws {
        try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_start(self.pointer, $0
    )
}
    }
    public func `stop`() throws {
        try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_stop(self.pointer, $0
    )
}
    }
    public func `syncWallets`() throws {
        try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_sync_wallets(self.pointer, $0
    )
}
    }
    public func `nextEvent`()  -> Event {
        return try! FfiConverterTypeEvent.lift(
            try!
    rustCall() {
    
    ldk_node_7d5c_Node_next_event(self.pointer, $0
    )
}
        )
    }
    public func `eventHandled`()  {
        try!
    rustCall() {
    
    ldk_node_7d5c_Node_event_handled(self.pointer, $0
    )
}
    }
    public func `nodeId`()  -> PublicKey {
        return try! FfiConverterTypePublicKey.lift(
            try!
    rustCall() {
    
    ldk_node_7d5c_Node_node_id(self.pointer, $0
    )
}
        )
    }
    public func `newFundingAddress`() throws -> Address {
        return try FfiConverterTypeAddress.lift(
            try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_new_funding_address(self.pointer, $0
    )
}
        )
    }
    public func `spendableOnchainBalanceSats`() throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_spendable_onchain_balance_sats(self.pointer, $0
    )
}
        )
    }
    public func `totalOnchainBalanceSats`() throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_total_onchain_balance_sats(self.pointer, $0
    )
}
        )
    }
    public func `connect`(`nodeId`: PublicKey, `address`: SocketAddr, `permanently`: Bool) throws {
        try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_connect(self.pointer, 
        FfiConverterTypePublicKey.lower(`nodeId`), 
        FfiConverterTypeSocketAddr.lower(`address`), 
        FfiConverterBool.lower(`permanently`), $0
    )
}
    }
    public func `disconnect`(`nodeId`: PublicKey) throws {
        try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_disconnect(self.pointer, 
        FfiConverterTypePublicKey.lower(`nodeId`), $0
    )
}
    }
    public func `connectOpenChannel`(`nodeId`: PublicKey, `address`: SocketAddr, `channelAmountSats`: UInt64, `announceChannel`: Bool) throws {
        try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_connect_open_channel(self.pointer, 
        FfiConverterTypePublicKey.lower(`nodeId`), 
        FfiConverterTypeSocketAddr.lower(`address`), 
        FfiConverterUInt64.lower(`channelAmountSats`), 
        FfiConverterBool.lower(`announceChannel`), $0
    )
}
    }
    public func `closeChannel`(`channelId`: ChannelId, `counterpartyNodeId`: PublicKey) throws {
        try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_close_channel(self.pointer, 
        FfiConverterTypeChannelId.lower(`channelId`), 
        FfiConverterTypePublicKey.lower(`counterpartyNodeId`), $0
    )
}
    }
    public func `sendPayment`(`invoice`: Invoice) throws -> PaymentHash {
        return try FfiConverterTypePaymentHash.lift(
            try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_send_payment(self.pointer, 
        FfiConverterTypeInvoice.lower(`invoice`), $0
    )
}
        )
    }
    public func `sendPaymentUsingAmount`(`invoice`: Invoice, `amountMsat`: UInt64) throws -> PaymentHash {
        return try FfiConverterTypePaymentHash.lift(
            try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_send_payment_using_amount(self.pointer, 
        FfiConverterTypeInvoice.lower(`invoice`), 
        FfiConverterUInt64.lower(`amountMsat`), $0
    )
}
        )
    }
    public func `sendSpontaneousPayment`(`amountMsat`: UInt64, `nodeId`: PublicKey) throws -> PaymentHash {
        return try FfiConverterTypePaymentHash.lift(
            try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_send_spontaneous_payment(self.pointer, 
        FfiConverterUInt64.lower(`amountMsat`), 
        FfiConverterTypePublicKey.lower(`nodeId`), $0
    )
}
        )
    }
    public func `receivePayment`(`amountMsat`: UInt64, `description`: String, `expirySecs`: UInt32) throws -> Invoice {
        return try FfiConverterTypeInvoice.lift(
            try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_receive_payment(self.pointer, 
        FfiConverterUInt64.lower(`amountMsat`), 
        FfiConverterString.lower(`description`), 
        FfiConverterUInt32.lower(`expirySecs`), $0
    )
}
        )
    }
    public func `receiveVariableAmountPayment`(`description`: String, `expirySecs`: UInt32) throws -> Invoice {
        return try FfiConverterTypeInvoice.lift(
            try
    rustCallWithError(FfiConverterTypeNodeError.self) {
    ldk_node_7d5c_Node_receive_variable_amount_payment(self.pointer, 
        FfiConverterString.lower(`description`), 
        FfiConverterUInt32.lower(`expirySecs`), $0
    )
}
        )
    }
    public func `paymentInfo`(`paymentHash`: PaymentHash)  -> PaymentInfo? {
        return try! FfiConverterOptionTypePaymentInfo.lift(
            try!
    rustCall() {
    
    ldk_node_7d5c_Node_payment_info(self.pointer, 
        FfiConverterTypePaymentHash.lower(`paymentHash`), $0
    )
}
        )
    }
    public func `listPeers`()  -> [PeerDetails] {
        return try! FfiConverterSequenceTypePeerDetails.lift(
            try!
    rustCall() {
    
    ldk_node_7d5c_Node_list_peers(self.pointer, $0
    )
}
        )
    }
    public func `listChannels`()  -> [ChannelDetails] {
        return try! FfiConverterSequenceTypeChannelDetails.lift(
            try!
    rustCall() {
    
    ldk_node_7d5c_Node_list_channels(self.pointer, $0
    )
}
        )
    }
    
}


public struct FfiConverterTypeNode: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Node

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Node {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Node, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Node {
        return Node(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Node) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public struct ChannelDetails {
    public var `channelId`: ChannelId
    public var `counterparty`: PublicKey
    public var `fundingTxo`: OutPoint?
    public var `shortChannelId`: UInt64?
    public var `channelValueSatoshis`: UInt64
    public var `balanceMsat`: UInt64
    public var `outboundCapacityMsat`: UInt64
    public var `inboundCapacityMsat`: UInt64
    public var `confirmationsRequired`: UInt32?
    public var `confirmations`: UInt32?
    public var `isOutbound`: Bool
    public var `isChannelReady`: Bool
    public var `isUsable`: Bool
    public var `isPublic`: Bool
    public var `cltvExpiryDelta`: UInt16?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`channelId`: ChannelId, `counterparty`: PublicKey, `fundingTxo`: OutPoint?, `shortChannelId`: UInt64?, `channelValueSatoshis`: UInt64, `balanceMsat`: UInt64, `outboundCapacityMsat`: UInt64, `inboundCapacityMsat`: UInt64, `confirmationsRequired`: UInt32?, `confirmations`: UInt32?, `isOutbound`: Bool, `isChannelReady`: Bool, `isUsable`: Bool, `isPublic`: Bool, `cltvExpiryDelta`: UInt16?) {
        self.`channelId` = `channelId`
        self.`counterparty` = `counterparty`
        self.`fundingTxo` = `fundingTxo`
        self.`shortChannelId` = `shortChannelId`
        self.`channelValueSatoshis` = `channelValueSatoshis`
        self.`balanceMsat` = `balanceMsat`
        self.`outboundCapacityMsat` = `outboundCapacityMsat`
        self.`inboundCapacityMsat` = `inboundCapacityMsat`
        self.`confirmationsRequired` = `confirmationsRequired`
        self.`confirmations` = `confirmations`
        self.`isOutbound` = `isOutbound`
        self.`isChannelReady` = `isChannelReady`
        self.`isUsable` = `isUsable`
        self.`isPublic` = `isPublic`
        self.`cltvExpiryDelta` = `cltvExpiryDelta`
    }
}


extension ChannelDetails: Equatable, Hashable {
    public static func ==(lhs: ChannelDetails, rhs: ChannelDetails) -> Bool {
        if lhs.`channelId` != rhs.`channelId` {
            return false
        }
        if lhs.`counterparty` != rhs.`counterparty` {
            return false
        }
        if lhs.`fundingTxo` != rhs.`fundingTxo` {
            return false
        }
        if lhs.`shortChannelId` != rhs.`shortChannelId` {
            return false
        }
        if lhs.`channelValueSatoshis` != rhs.`channelValueSatoshis` {
            return false
        }
        if lhs.`balanceMsat` != rhs.`balanceMsat` {
            return false
        }
        if lhs.`outboundCapacityMsat` != rhs.`outboundCapacityMsat` {
            return false
        }
        if lhs.`inboundCapacityMsat` != rhs.`inboundCapacityMsat` {
            return false
        }
        if lhs.`confirmationsRequired` != rhs.`confirmationsRequired` {
            return false
        }
        if lhs.`confirmations` != rhs.`confirmations` {
            return false
        }
        if lhs.`isOutbound` != rhs.`isOutbound` {
            return false
        }
        if lhs.`isChannelReady` != rhs.`isChannelReady` {
            return false
        }
        if lhs.`isUsable` != rhs.`isUsable` {
            return false
        }
        if lhs.`isPublic` != rhs.`isPublic` {
            return false
        }
        if lhs.`cltvExpiryDelta` != rhs.`cltvExpiryDelta` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`channelId`)
        hasher.combine(`counterparty`)
        hasher.combine(`fundingTxo`)
        hasher.combine(`shortChannelId`)
        hasher.combine(`channelValueSatoshis`)
        hasher.combine(`balanceMsat`)
        hasher.combine(`outboundCapacityMsat`)
        hasher.combine(`inboundCapacityMsat`)
        hasher.combine(`confirmationsRequired`)
        hasher.combine(`confirmations`)
        hasher.combine(`isOutbound`)
        hasher.combine(`isChannelReady`)
        hasher.combine(`isUsable`)
        hasher.combine(`isPublic`)
        hasher.combine(`cltvExpiryDelta`)
    }
}


public struct FfiConverterTypeChannelDetails: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChannelDetails {
        return try ChannelDetails(
            `channelId`: FfiConverterTypeChannelId.read(from: &buf), 
            `counterparty`: FfiConverterTypePublicKey.read(from: &buf), 
            `fundingTxo`: FfiConverterOptionTypeOutPoint.read(from: &buf), 
            `shortChannelId`: FfiConverterOptionUInt64.read(from: &buf), 
            `channelValueSatoshis`: FfiConverterUInt64.read(from: &buf), 
            `balanceMsat`: FfiConverterUInt64.read(from: &buf), 
            `outboundCapacityMsat`: FfiConverterUInt64.read(from: &buf), 
            `inboundCapacityMsat`: FfiConverterUInt64.read(from: &buf), 
            `confirmationsRequired`: FfiConverterOptionUInt32.read(from: &buf), 
            `confirmations`: FfiConverterOptionUInt32.read(from: &buf), 
            `isOutbound`: FfiConverterBool.read(from: &buf), 
            `isChannelReady`: FfiConverterBool.read(from: &buf), 
            `isUsable`: FfiConverterBool.read(from: &buf), 
            `isPublic`: FfiConverterBool.read(from: &buf), 
            `cltvExpiryDelta`: FfiConverterOptionUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: ChannelDetails, into buf: inout [UInt8]) {
        FfiConverterTypeChannelId.write(value.`channelId`, into: &buf)
        FfiConverterTypePublicKey.write(value.`counterparty`, into: &buf)
        FfiConverterOptionTypeOutPoint.write(value.`fundingTxo`, into: &buf)
        FfiConverterOptionUInt64.write(value.`shortChannelId`, into: &buf)
        FfiConverterUInt64.write(value.`channelValueSatoshis`, into: &buf)
        FfiConverterUInt64.write(value.`balanceMsat`, into: &buf)
        FfiConverterUInt64.write(value.`outboundCapacityMsat`, into: &buf)
        FfiConverterUInt64.write(value.`inboundCapacityMsat`, into: &buf)
        FfiConverterOptionUInt32.write(value.`confirmationsRequired`, into: &buf)
        FfiConverterOptionUInt32.write(value.`confirmations`, into: &buf)
        FfiConverterBool.write(value.`isOutbound`, into: &buf)
        FfiConverterBool.write(value.`isChannelReady`, into: &buf)
        FfiConverterBool.write(value.`isUsable`, into: &buf)
        FfiConverterBool.write(value.`isPublic`, into: &buf)
        FfiConverterOptionUInt16.write(value.`cltvExpiryDelta`, into: &buf)
    }
}


public func FfiConverterTypeChannelDetails_lift(_ buf: RustBuffer) throws -> ChannelDetails {
    return try FfiConverterTypeChannelDetails.lift(buf)
}

public func FfiConverterTypeChannelDetails_lower(_ value: ChannelDetails) -> RustBuffer {
    return FfiConverterTypeChannelDetails.lower(value)
}


public struct Config {
    public var `storageDirPath`: String
    public var `esploraServerUrl`: String
    public var `network`: Network
    public var `listeningAddress`: SocketAddr?
    public var `defaultCltvExpiryDelta`: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`storageDirPath`: String, `esploraServerUrl`: String, `network`: Network, `listeningAddress`: SocketAddr?, `defaultCltvExpiryDelta`: UInt32) {
        self.`storageDirPath` = `storageDirPath`
        self.`esploraServerUrl` = `esploraServerUrl`
        self.`network` = `network`
        self.`listeningAddress` = `listeningAddress`
        self.`defaultCltvExpiryDelta` = `defaultCltvExpiryDelta`
    }
}


extension Config: Equatable, Hashable {
    public static func ==(lhs: Config, rhs: Config) -> Bool {
        if lhs.`storageDirPath` != rhs.`storageDirPath` {
            return false
        }
        if lhs.`esploraServerUrl` != rhs.`esploraServerUrl` {
            return false
        }
        if lhs.`network` != rhs.`network` {
            return false
        }
        if lhs.`listeningAddress` != rhs.`listeningAddress` {
            return false
        }
        if lhs.`defaultCltvExpiryDelta` != rhs.`defaultCltvExpiryDelta` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`storageDirPath`)
        hasher.combine(`esploraServerUrl`)
        hasher.combine(`network`)
        hasher.combine(`listeningAddress`)
        hasher.combine(`defaultCltvExpiryDelta`)
    }
}


public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return try Config(
            `storageDirPath`: FfiConverterString.read(from: &buf), 
            `esploraServerUrl`: FfiConverterString.read(from: &buf), 
            `network`: FfiConverterTypeNetwork.read(from: &buf), 
            `listeningAddress`: FfiConverterOptionTypeSocketAddr.read(from: &buf), 
            `defaultCltvExpiryDelta`: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterString.write(value.`storageDirPath`, into: &buf)
        FfiConverterString.write(value.`esploraServerUrl`, into: &buf)
        FfiConverterTypeNetwork.write(value.`network`, into: &buf)
        FfiConverterOptionTypeSocketAddr.write(value.`listeningAddress`, into: &buf)
        FfiConverterUInt32.write(value.`defaultCltvExpiryDelta`, into: &buf)
    }
}


public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}


public struct OutPoint {
    public var `txid`: String
    public var `index`: UInt16

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`txid`: String, `index`: UInt16) {
        self.`txid` = `txid`
        self.`index` = `index`
    }
}


extension OutPoint: Equatable, Hashable {
    public static func ==(lhs: OutPoint, rhs: OutPoint) -> Bool {
        if lhs.`txid` != rhs.`txid` {
            return false
        }
        if lhs.`index` != rhs.`index` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`txid`)
        hasher.combine(`index`)
    }
}


public struct FfiConverterTypeOutPoint: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OutPoint {
        return try OutPoint(
            `txid`: FfiConverterString.read(from: &buf), 
            `index`: FfiConverterUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: OutPoint, into buf: inout [UInt8]) {
        FfiConverterString.write(value.`txid`, into: &buf)
        FfiConverterUInt16.write(value.`index`, into: &buf)
    }
}


public func FfiConverterTypeOutPoint_lift(_ buf: RustBuffer) throws -> OutPoint {
    return try FfiConverterTypeOutPoint.lift(buf)
}

public func FfiConverterTypeOutPoint_lower(_ value: OutPoint) -> RustBuffer {
    return FfiConverterTypeOutPoint.lower(value)
}


public struct PaymentInfo {
    public var `paymentHash`: PaymentHash
    public var `preimage`: PaymentPreimage?
    public var `secret`: PaymentSecret?
    public var `amountMsat`: UInt64?
    public var `direction`: PaymentDirection
    public var `status`: PaymentStatus

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`paymentHash`: PaymentHash, `preimage`: PaymentPreimage?, `secret`: PaymentSecret?, `amountMsat`: UInt64?, `direction`: PaymentDirection, `status`: PaymentStatus) {
        self.`paymentHash` = `paymentHash`
        self.`preimage` = `preimage`
        self.`secret` = `secret`
        self.`amountMsat` = `amountMsat`
        self.`direction` = `direction`
        self.`status` = `status`
    }
}


extension PaymentInfo: Equatable, Hashable {
    public static func ==(lhs: PaymentInfo, rhs: PaymentInfo) -> Bool {
        if lhs.`paymentHash` != rhs.`paymentHash` {
            return false
        }
        if lhs.`preimage` != rhs.`preimage` {
            return false
        }
        if lhs.`secret` != rhs.`secret` {
            return false
        }
        if lhs.`amountMsat` != rhs.`amountMsat` {
            return false
        }
        if lhs.`direction` != rhs.`direction` {
            return false
        }
        if lhs.`status` != rhs.`status` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`paymentHash`)
        hasher.combine(`preimage`)
        hasher.combine(`secret`)
        hasher.combine(`amountMsat`)
        hasher.combine(`direction`)
        hasher.combine(`status`)
    }
}


public struct FfiConverterTypePaymentInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentInfo {
        return try PaymentInfo(
            `paymentHash`: FfiConverterTypePaymentHash.read(from: &buf), 
            `preimage`: FfiConverterOptionTypePaymentPreimage.read(from: &buf), 
            `secret`: FfiConverterOptionTypePaymentSecret.read(from: &buf), 
            `amountMsat`: FfiConverterOptionUInt64.read(from: &buf), 
            `direction`: FfiConverterTypePaymentDirection.read(from: &buf), 
            `status`: FfiConverterTypePaymentStatus.read(from: &buf)
        )
    }

    public static func write(_ value: PaymentInfo, into buf: inout [UInt8]) {
        FfiConverterTypePaymentHash.write(value.`paymentHash`, into: &buf)
        FfiConverterOptionTypePaymentPreimage.write(value.`preimage`, into: &buf)
        FfiConverterOptionTypePaymentSecret.write(value.`secret`, into: &buf)
        FfiConverterOptionUInt64.write(value.`amountMsat`, into: &buf)
        FfiConverterTypePaymentDirection.write(value.`direction`, into: &buf)
        FfiConverterTypePaymentStatus.write(value.`status`, into: &buf)
    }
}


public func FfiConverterTypePaymentInfo_lift(_ buf: RustBuffer) throws -> PaymentInfo {
    return try FfiConverterTypePaymentInfo.lift(buf)
}

public func FfiConverterTypePaymentInfo_lower(_ value: PaymentInfo) -> RustBuffer {
    return FfiConverterTypePaymentInfo.lower(value)
}


public struct PeerDetails {
    public var `nodeId`: PublicKey
    public var `isConnected`: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`nodeId`: PublicKey, `isConnected`: Bool) {
        self.`nodeId` = `nodeId`
        self.`isConnected` = `isConnected`
    }
}


extension PeerDetails: Equatable, Hashable {
    public static func ==(lhs: PeerDetails, rhs: PeerDetails) -> Bool {
        if lhs.`nodeId` != rhs.`nodeId` {
            return false
        }
        if lhs.`isConnected` != rhs.`isConnected` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`nodeId`)
        hasher.combine(`isConnected`)
    }
}


public struct FfiConverterTypePeerDetails: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PeerDetails {
        return try PeerDetails(
            `nodeId`: FfiConverterTypePublicKey.read(from: &buf), 
            `isConnected`: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: PeerDetails, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.`nodeId`, into: &buf)
        FfiConverterBool.write(value.`isConnected`, into: &buf)
    }
}


public func FfiConverterTypePeerDetails_lift(_ buf: RustBuffer) throws -> PeerDetails {
    return try FfiConverterTypePeerDetails.lift(buf)
}

public func FfiConverterTypePeerDetails_lower(_ value: PeerDetails) -> RustBuffer {
    return FfiConverterTypePeerDetails.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Event {
    
    case `paymentSuccessful`(`paymentHash`: PaymentHash)
    case `paymentFailed`(`paymentHash`: PaymentHash)
    case `paymentReceived`(`paymentHash`: PaymentHash, `amountMsat`: UInt64)
    case `channelReady`(`channelId`: ChannelId, `userChannelId`: UserChannelId)
    case `channelClosed`(`channelId`: ChannelId, `userChannelId`: UserChannelId)
}

public struct FfiConverterTypeEvent: FfiConverterRustBuffer {
    typealias SwiftType = Event

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Event {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`paymentSuccessful`(
            `paymentHash`: try FfiConverterTypePaymentHash.read(from: &buf)
        )
        
        case 2: return .`paymentFailed`(
            `paymentHash`: try FfiConverterTypePaymentHash.read(from: &buf)
        )
        
        case 3: return .`paymentReceived`(
            `paymentHash`: try FfiConverterTypePaymentHash.read(from: &buf), 
            `amountMsat`: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 4: return .`channelReady`(
            `channelId`: try FfiConverterTypeChannelId.read(from: &buf), 
            `userChannelId`: try FfiConverterTypeUserChannelId.read(from: &buf)
        )
        
        case 5: return .`channelClosed`(
            `channelId`: try FfiConverterTypeChannelId.read(from: &buf), 
            `userChannelId`: try FfiConverterTypeUserChannelId.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Event, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`paymentSuccessful`(`paymentHash`):
            writeInt(&buf, Int32(1))
            FfiConverterTypePaymentHash.write(`paymentHash`, into: &buf)
            
        
        case let .`paymentFailed`(`paymentHash`):
            writeInt(&buf, Int32(2))
            FfiConverterTypePaymentHash.write(`paymentHash`, into: &buf)
            
        
        case let .`paymentReceived`(`paymentHash`,`amountMsat`):
            writeInt(&buf, Int32(3))
            FfiConverterTypePaymentHash.write(`paymentHash`, into: &buf)
            FfiConverterUInt64.write(`amountMsat`, into: &buf)
            
        
        case let .`channelReady`(`channelId`,`userChannelId`):
            writeInt(&buf, Int32(4))
            FfiConverterTypeChannelId.write(`channelId`, into: &buf)
            FfiConverterTypeUserChannelId.write(`userChannelId`, into: &buf)
            
        
        case let .`channelClosed`(`channelId`,`userChannelId`):
            writeInt(&buf, Int32(5))
            FfiConverterTypeChannelId.write(`channelId`, into: &buf)
            FfiConverterTypeUserChannelId.write(`userChannelId`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeEvent_lift(_ buf: RustBuffer) throws -> Event {
    return try FfiConverterTypeEvent.lift(buf)
}

public func FfiConverterTypeEvent_lower(_ value: Event) -> RustBuffer {
    return FfiConverterTypeEvent.lower(value)
}


extension Event: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PaymentDirection {
    
    case `inbound`
    case `outbound`
}

public struct FfiConverterTypePaymentDirection: FfiConverterRustBuffer {
    typealias SwiftType = PaymentDirection

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentDirection {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`inbound`
        
        case 2: return .`outbound`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentDirection, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`inbound`:
            writeInt(&buf, Int32(1))
        
        
        case .`outbound`:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypePaymentDirection_lift(_ buf: RustBuffer) throws -> PaymentDirection {
    return try FfiConverterTypePaymentDirection.lift(buf)
}

public func FfiConverterTypePaymentDirection_lower(_ value: PaymentDirection) -> RustBuffer {
    return FfiConverterTypePaymentDirection.lower(value)
}


extension PaymentDirection: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PaymentStatus {
    
    case `pending`
    case `succeeded`
    case `failed`
}

public struct FfiConverterTypePaymentStatus: FfiConverterRustBuffer {
    typealias SwiftType = PaymentStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`pending`
        
        case 2: return .`succeeded`
        
        case 3: return .`failed`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`pending`:
            writeInt(&buf, Int32(1))
        
        
        case .`succeeded`:
            writeInt(&buf, Int32(2))
        
        
        case .`failed`:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypePaymentStatus_lift(_ buf: RustBuffer) throws -> PaymentStatus {
    return try FfiConverterTypePaymentStatus.lift(buf)
}

public func FfiConverterTypePaymentStatus_lower(_ value: PaymentStatus) -> RustBuffer {
    return FfiConverterTypePaymentStatus.lower(value)
}


extension PaymentStatus: Equatable, Hashable {}



public enum NodeError {

    
    
    // Simple error enums only carry a message
    case AlreadyRunning(message: String)
    
    // Simple error enums only carry a message
    case NotRunning(message: String)
    
    // Simple error enums only carry a message
    case FundingTxCreationFailed(message: String)
    
    // Simple error enums only carry a message
    case ConnectionFailed(message: String)
    
    // Simple error enums only carry a message
    case AddressInvalid(message: String)
    
    // Simple error enums only carry a message
    case PublicKeyInvalid(message: String)
    
    // Simple error enums only carry a message
    case PaymentHashInvalid(message: String)
    
    // Simple error enums only carry a message
    case PaymentPreimageInvalid(message: String)
    
    // Simple error enums only carry a message
    case PaymentSecretInvalid(message: String)
    
    // Simple error enums only carry a message
    case NonUniquePaymentHash(message: String)
    
    // Simple error enums only carry a message
    case InvalidAmount(message: String)
    
    // Simple error enums only carry a message
    case InvalidInvoice(message: String)
    
    // Simple error enums only carry a message
    case InvoiceCreationFailed(message: String)
    
    // Simple error enums only carry a message
    case InsufficientFunds(message: String)
    
    // Simple error enums only carry a message
    case PaymentFailed(message: String)
    
    // Simple error enums only carry a message
    case ChannelIdInvalid(message: String)
    
    // Simple error enums only carry a message
    case NetworkInvalid(message: String)
    
    // Simple error enums only carry a message
    case PeerInfoParseFailed(message: String)
    
    // Simple error enums only carry a message
    case ChannelCreationFailed(message: String)
    
    // Simple error enums only carry a message
    case ChannelClosingFailed(message: String)
    
    // Simple error enums only carry a message
    case PersistenceFailed(message: String)
    
    // Simple error enums only carry a message
    case WalletOperationFailed(message: String)
    
    // Simple error enums only carry a message
    case WalletSigningFailed(message: String)
    
    // Simple error enums only carry a message
    case TxSyncFailed(message: String)
    
}

public struct FfiConverterTypeNodeError: FfiConverterRustBuffer {
    typealias SwiftType = NodeError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .AlreadyRunning(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .NotRunning(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .FundingTxCreationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .ConnectionFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .AddressInvalid(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .PublicKeyInvalid(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .PaymentHashInvalid(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .PaymentPreimageInvalid(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .PaymentSecretInvalid(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .NonUniquePaymentHash(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .InvalidAmount(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .InvalidInvoice(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .InvoiceCreationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .InsufficientFunds(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .PaymentFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 16: return .ChannelIdInvalid(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .NetworkInvalid(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 18: return .PeerInfoParseFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 19: return .ChannelCreationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 20: return .ChannelClosingFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 21: return .PersistenceFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 22: return .WalletOperationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 23: return .WalletSigningFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 24: return .TxSyncFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NodeError, into buf: inout [UInt8]) {
        switch value {

        

        
        case let .AlreadyRunning(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
        case let .NotRunning(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
        case let .FundingTxCreationFailed(message):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(message, into: &buf)
        case let .ConnectionFailed(message):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(message, into: &buf)
        case let .AddressInvalid(message):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(message, into: &buf)
        case let .PublicKeyInvalid(message):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(message, into: &buf)
        case let .PaymentHashInvalid(message):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(message, into: &buf)
        case let .PaymentPreimageInvalid(message):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(message, into: &buf)
        case let .PaymentSecretInvalid(message):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(message, into: &buf)
        case let .NonUniquePaymentHash(message):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidAmount(message):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidInvoice(message):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(message, into: &buf)
        case let .InvoiceCreationFailed(message):
            writeInt(&buf, Int32(13))
            FfiConverterString.write(message, into: &buf)
        case let .InsufficientFunds(message):
            writeInt(&buf, Int32(14))
            FfiConverterString.write(message, into: &buf)
        case let .PaymentFailed(message):
            writeInt(&buf, Int32(15))
            FfiConverterString.write(message, into: &buf)
        case let .ChannelIdInvalid(message):
            writeInt(&buf, Int32(16))
            FfiConverterString.write(message, into: &buf)
        case let .NetworkInvalid(message):
            writeInt(&buf, Int32(17))
            FfiConverterString.write(message, into: &buf)
        case let .PeerInfoParseFailed(message):
            writeInt(&buf, Int32(18))
            FfiConverterString.write(message, into: &buf)
        case let .ChannelCreationFailed(message):
            writeInt(&buf, Int32(19))
            FfiConverterString.write(message, into: &buf)
        case let .ChannelClosingFailed(message):
            writeInt(&buf, Int32(20))
            FfiConverterString.write(message, into: &buf)
        case let .PersistenceFailed(message):
            writeInt(&buf, Int32(21))
            FfiConverterString.write(message, into: &buf)
        case let .WalletOperationFailed(message):
            writeInt(&buf, Int32(22))
            FfiConverterString.write(message, into: &buf)
        case let .WalletSigningFailed(message):
            writeInt(&buf, Int32(23))
            FfiConverterString.write(message, into: &buf)
        case let .TxSyncFailed(message):
            writeInt(&buf, Int32(24))
            FfiConverterString.write(message, into: &buf)

        
        }
    }
}


extension NodeError: Equatable, Hashable {}

extension NodeError: Error { }

fileprivate struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeOutPoint: FfiConverterRustBuffer {
    typealias SwiftType = OutPoint?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeOutPoint.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeOutPoint.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypePaymentInfo: FfiConverterRustBuffer {
    typealias SwiftType = PaymentInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePaymentInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePaymentInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypePaymentPreimage: FfiConverterRustBuffer {
    typealias SwiftType = PaymentPreimage?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePaymentPreimage.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePaymentPreimage.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypePaymentSecret: FfiConverterRustBuffer {
    typealias SwiftType = PaymentSecret?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePaymentSecret.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePaymentSecret.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeSocketAddr: FfiConverterRustBuffer {
    typealias SwiftType = SocketAddr?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSocketAddr.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSocketAddr.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceTypeChannelDetails: FfiConverterRustBuffer {
    typealias SwiftType = [ChannelDetails]

    public static func write(_ value: [ChannelDetails], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeChannelDetails.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ChannelDetails] {
        let len: Int32 = try readInt(&buf)
        var seq = [ChannelDetails]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeChannelDetails.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePeerDetails: FfiConverterRustBuffer {
    typealias SwiftType = [PeerDetails]

    public static func write(_ value: [PeerDetails], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePeerDetails.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PeerDetails] {
        let len: Int32 = try readInt(&buf)
        var seq = [PeerDetails]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePeerDetails.read(from: &buf))
        }
        return seq
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Address = String
public struct FfiConverterTypeAddress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Address {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Address, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Address {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Address) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ChannelId = String
public struct FfiConverterTypeChannelId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChannelId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: ChannelId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ChannelId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: ChannelId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Invoice = String
public struct FfiConverterTypeInvoice: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Invoice {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Invoice, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Invoice {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Invoice) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Network = String
public struct FfiConverterTypeNetwork: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Network {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Network) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PaymentHash = String
public struct FfiConverterTypePaymentHash: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentHash {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PaymentHash, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PaymentHash {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PaymentHash) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PaymentPreimage = String
public struct FfiConverterTypePaymentPreimage: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentPreimage {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PaymentPreimage, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PaymentPreimage {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PaymentPreimage) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PaymentSecret = String
public struct FfiConverterTypePaymentSecret: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentSecret {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PaymentSecret, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PaymentSecret {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PaymentSecret) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias PublicKey = String
public struct FfiConverterTypePublicKey: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKey {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: PublicKey, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> PublicKey {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: PublicKey) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias SocketAddr = String
public struct FfiConverterTypeSocketAddr: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SocketAddr {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: SocketAddr, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> SocketAddr {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: SocketAddr) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias UserChannelId = String
public struct FfiConverterTypeUserChannelId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserChannelId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: UserChannelId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> UserChannelId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: UserChannelId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum LdkNodeLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}